package ca.uwaterloo.gsd.ros.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.RuntimeFlags;
import jetbrains.mps.nodeEditor.EditorComponent;
import com.mbeddr.mpsutil.breadcrumb.runtime.plugin.BreadcrumbPanel;
import com.mbeddr.mpsutil.breadcrumb.runtime.plugin.BreadcrumbManager;
import javax.swing.JViewport;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import com.mbeddr.mpsutil.breadcrumb.runtime.plugin.AbstractNavigationListener;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import com.mbeddr.core.base.editor.mbeddrBaseStyles_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.core.base.editor.HorizLineCell;
import com.mbeddr.core.base.editor.BasicColors;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import com.mbeddr.core.base.editor.deleteEmptyStuffInCollection;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class Message_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createBreadcrumbEditor_ok3mgi_a(editorContext, node);
  }
  private EditorCell createBreadcrumbEditor_ok3mgi_a(final EditorContext editorContext, final SNode node) {
    EditorCell wrapped = createCollection_ok3mgi_a0(editorContext, node);

    if (SModelStereotype.isGeneratorModel(SNodeOperations.getModel(node)) || SModelStereotype.isTestModel(SNodeOperations.getModel(node)) || RuntimeFlags.isMergeDriverMode() || RuntimeFlags.isTestMode()) {
      wrapped.setBig(true);
      return wrapped;
    }

    final EditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();

    final BreadcrumbPanel breadcrumbPanel = BreadcrumbManager.getInstance().getOrCreateBreadcrumbPanel(node, editorComponent);
    breadcrumbPanel.setShowIcons(true);


    final JViewport viewport = editorComponent.getViewport();

    EditorCell_Collection result = new jetbrains.mps.nodeEditor.cells.EditorCell_Collection(editorContext, node, new CellLayout_Horizontal(), null) {
      @Override
      public void onRemove() {
        if (LOG_1907621316.isDebugEnabled()) {
          LOG_1907621316.debug("[" + editorComponent.hashCode() + "] " + " removed from Cell");
        }

        {
          final AbstractNavigationListener listener = breadcrumbPanel.getListener();
          if (listener != null) {
            viewport.removeChangeListener(listener);
            editorComponent.getSelectionManager().removeSelectionListener(listener);
          }
        }

        super.onRemove();
      }
      @Override
      public void onAdd() {
        super.onAdd();

        if (LOG_1907621316.isDebugEnabled()) {
          LOG_1907621316.debug("[" + editorComponent.hashCode() + "] " + " added to Cell");
        }

        {
          final AbstractNavigationListener listener = breadcrumbPanel.getListener();
          if (listener != null) {
            if (!(Sequence.fromIterable(Sequence.fromArray(viewport.getChangeListeners())).contains(listener))) {
              viewport.addChangeListener(listener);
              editorComponent.getSelectionManager().addSelectionListener(listener);
              listener.selectionChanged(editorComponent, null, null);
            }
          }
        }

      }
    };
    result.addEditorCell(wrapped);
    result.setBig(true);
    return result;
  }
  private EditorCell createCollection_ok3mgi_a0(EditorContext editorContext, SNode node) {
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection editorCell = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ok3mgi_a0");
    editorCell.setFoldable(renderingCondition_ok3mgi_a0a(node, editorContext));
    editorCell.setFoldedCell(this.createReadOnlyModelAccessor_ok3mgi_a0a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ok3mgi_a0a(editorContext, node));
    editorCell.addEditorCell(this.createCustom_ok3mgi_b0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ok3mgi_c0a(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_ok3mgi_d0a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_ok3mgi_a0a(SNode node, EditorContext editorContext) {
    return (boolean) BaseConcept__BehaviorDescriptor.isInTemplates_idhEwIMij.invoke(node);
  }
  private EditorCell createCollection_ok3mgi_a0a(EditorContext editorContext, SNode node) {
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection editorCell = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ok3mgi_a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createComponent_ok3mgi_a0a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ok3mgi_b0a0(editorContext, node));
    if (renderingCondition_ok3mgi_a2a0a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_ok3mgi_c0a0(editorContext, node));
    }
    return editorCell;
  }
  private EditorCell createComponent_ok3mgi_a0a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "com.mbeddr.core.base.editor.iconAndNameCell");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createCollection_ok3mgi_b0a0(EditorContext editorContext, SNode node) {
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection editorCell = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ok3mgi_b0a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ok3mgi_a1a0a(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_ok3mgi_b1a0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ok3mgi_a1a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "model  ");
    editorCell.setCellId("Constant_ok3mgi_a1a0a");
    Style style = new StyleImpl();
    mbeddrBaseStyles_StyleSheet.apply_PassiveText(style, editorCell);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_ok3mgi_b1a0a(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        return jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(node));
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_ok3mgi_b1a0a");
    Style style = new StyleImpl();
    mbeddrBaseStyles_StyleSheet.apply_PassiveText(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    style.set(StyleAttributes.SELECTABLE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createCollection_ok3mgi_c0a0(EditorContext editorContext, SNode node) {
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection editorCell = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ok3mgi_c0a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ok3mgi_a2a0a(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_ok3mgi_b2a0a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_ok3mgi_a2a0a(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")) != null;
  }
  private EditorCell createConstant_ok3mgi_a2a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "package");
    editorCell.setCellId("Constant_ok3mgi_a2a0a");
    Style style = new StyleImpl();
    mbeddrBaseStyles_StyleSheet.apply_PassiveText(style, editorCell);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_ok3mgi_b2a0a(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        return (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")) != null ? SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")) : "");
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_ok3mgi_b2a0a");
    Style style = new StyleImpl();
    mbeddrBaseStyles_StyleSheet.apply_PassiveText(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createCustom_ok3mgi_b0a(final EditorContext editorContext, final SNode node) {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<HorizLineCell>() {
      public HorizLineCell invoke() {
        return new HorizLineCell(node, BasicColors.KEYWORD_BLUE, 2, 3);
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("Custom_ok3mgi_b0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_ok3mgi_c0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_ok3mgi_c0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.EDITABLE, 0, false);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_ok3mgi_d0a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new Message_Editor.contentListHandler_ok3mgi_d0a(node, "content", editorContext);
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);
    editorCell.setCellId("refNodeList_content");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class contentListHandler_ok3mgi_d0a extends RefNodeListHandler {
    public contentListHandler_ok3mgi_d0a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return nodeFactory(listOwner, editorContext);
    }
    public SNode nodeFactory(SNode node, EditorContext editorContext) {
      return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x2d50825385ba790L, "ca.uwaterloo.gsd.ros.structure.EmptyMessageContent")));
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(editorContext, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public EditorCell createEmptyCell_internal(EditorContext editorContext, SNode node) {
      return this.createConstant_ok3mgi_a3a0(editorContext, node);
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
          deleteEmptyStuffInCollection.setCellActions(elementCell, elementNode, editorContext);
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
    private EditorCell createConstant_ok3mgi_a3a0(EditorContext editorContext, SNode node) {
      EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
      editorCell.setCellId("Constant_ok3mgi_a3a0");
      Style style = new StyleImpl();
      style.set(StyleAttributes.EDITABLE, 0, true);
      editorCell.getStyle().putAll(style);
      editorCell.setDefaultText("");
      return editorCell;
    }
  }
  private EditorCell createReadOnlyModelAccessor_ok3mgi_a0a(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        return "module " + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "...";
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_ok3mgi_a0a");
    return editorCell;
  }
  protected static Logger LOG_1907621316 = LogManager.getLogger(Message_Editor.class);
}

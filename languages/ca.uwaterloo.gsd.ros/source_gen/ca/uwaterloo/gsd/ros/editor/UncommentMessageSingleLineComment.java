package ca.uwaterloo.gsd.ros.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class UncommentMessageSingleLineComment {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.COMMENT, new UncommentMessageSingleLineComment.UncommentMessageSingleLineComment_COMMENT(node));
    editorCell.setAction(CellActionType.DELETE, new UncommentMessageSingleLineComment.UncommentMessageSingleLineComment_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new UncommentMessageSingleLineComment.UncommentMessageSingleLineComment_BACKSPACE(node));
  }
  public static class UncommentMessageSingleLineComment_COMMENT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public UncommentMessageSingleLineComment_COMMENT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class UncommentMessageSingleLineComment_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public UncommentMessageSingleLineComment_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "If delete comes from end of previos single-line comment (due to the nature editor distributes notification), merge comments. Otherwise, unwrap commented statement, if any";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode selected = editorContext.getSelectedNode();
      if (SNodeOperations.isInstanceOf(selected, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "jetbrains.mps.baseLanguage.structure.CommentPart")) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment")) && !(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).contains(SNodeOperations.cast(selected, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "jetbrains.mps.baseLanguage.structure.CommentPart"))))) {
        SNode prevLine = SNodeOperations.cast(SNodeOperations.getParent(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"));
        ListSequence.fromList(SLinkOperations.getChildren(prevLine, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))));
        SNodeOperations.deleteNode(node);
        return;
      }
      if (SNodeOperations.isInstanceOf(selected, MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"))) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"))) {
          // if we got 'delete' for whole comment (not CommentPart), and this map is attached to double slash  
          // constant, it's likely we got 'Del' or 'Backspace' (no way to tell one from another) pressed over 
          // double slash constant. Try to join comment lines then. 
          SNode prevLine = SNodeOperations.cast(SNodeOperations.getPrevSibling(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"));
          ListSequence.fromList(SLinkOperations.getChildren(prevLine, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))));
        }
        SNodeOperations.deleteNode(node);

      }
    }
  }
  public static class UncommentMessageSingleLineComment_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public UncommentMessageSingleLineComment_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "If delete comes from end of previos single-line comment (due to the nature editor distributes notification), merge comments. Otherwise, unwrap commented statement, if any";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode selected = editorContext.getSelectedNode();
      if (SNodeOperations.isInstanceOf(selected, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "jetbrains.mps.baseLanguage.structure.CommentPart")) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment")) && !(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).contains(SNodeOperations.cast(selected, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "jetbrains.mps.baseLanguage.structure.CommentPart"))))) {
        SNode prevLine = SNodeOperations.cast(SNodeOperations.getParent(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"));
        ListSequence.fromList(SLinkOperations.getChildren(prevLine, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))));
        SNodeOperations.deleteNode(node);
        return;
      }
      if (SNodeOperations.isInstanceOf(selected, MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"))) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"))) {
          // if we got 'delete' for whole comment (not CommentPart), and this map is attached to double slash  
          // constant, it's likely we got 'Del' or 'Backspace' (no way to tell one from another) pressed over 
          // double slash constant. Try to join comment lines then. 
          SNode prevLine = SNodeOperations.cast(SNodeOperations.getPrevSibling(selected), MetaAdapterFactory.getConcept(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, "ca.uwaterloo.gsd.ros.structure.MessageSingleLineComment"));
          ListSequence.fromList(SLinkOperations.getChildren(prevLine, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))).addSequence(ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x73b2b904295848f1L, 0x87324d9d995324d8L, 0x4e6477385e4642ccL, 0x57d533a7af16ff73L, "commentPart"))));
        }
        SNodeOperations.deleteNode(node);

      }
    }
  }
}
